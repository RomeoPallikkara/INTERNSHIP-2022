
#importing the important libraries

from astropy.io import fits
from astropy.table import Table
import matplotlib.pyplot as plt
import numpy as np
from scipy.interpolate import interp1d
import os
from statistics import *

# mount drive
from google.colab import drive
drive.mount('/content/gdrive')


#getting all the fits files of the pure systems from the path by using os.path

path ="/content/gdrive/MyDrive/PURE OVI SYSTEMS"

fitsfiles = []

for root, dirs, files in os.walk(path):
	for file in files:
       
		fitsfiles.append(os.path.join(root,file))



#setting a value for the wavelength range

lower_bound = 1028.986328125
upper_bound = 1040.813232421875

w_int = np.arange(lower_bound,upper_bound,.03)



#creating rebinned flux/cont values
flux_list=[]
for i in fitsfiles:
  intflux=[]
  hdul = fits.open (i)
  cont= hdul[1].data['CONT']
  waves =hdul[1].data['WAVE']
  flux= hdul[1].data['FLUX']
  err=hdul[1].data['ERR']
  errc=hdul[1].data['ERRC']
  g=(flux/cont)
  f = interp1d(waves,g,fill_value ='extrapolate')
  f_int = f(w_int)
  intflux = list(f_int)
  flux_list.append(intflux)



#creating a list which conain all the first elements each systems
arrays = [np.array(x) for x in flux_list]
a = [(k) for k in zip(*arrays)]


#creating rebinned flux/err values
w_list=[]
for i in fitsfiles:
  intflux=[]
  hdul = fits.open (i)
  cont= hdul[1].data['CONT']
  waves =hdul[1].data['WAVE']
  flux= hdul[1].data['FLUX']
  err=hdul[1].data['ERR']
  errc=hdul[1].data['ERRC']
  g=(flux)/(err)
  f = interp1d(waves,g,fill_value ='extrapolate')
  f_int = f(w_int)
  intflux = list(f_int)
  w_list.append(intflux)



#creating a list which conain all the first elements each systems

arrays = [np.array(x) for x in w_list]
b = [(k) for k in zip(*arrays)]




signal = list(a)
noise=list(b)

#weighted average step in which ecah pixel is divided by its error
pixel_wise=[]
for i in range(0,395):
  x=sum([(a*b) for a,b in zip(signal[i],noise[i])])
  y=sum(noise[i])
  result=x/y
  pixel_wise.append(result)

#weighted average step in which ecah 

median=[]
for i in range(0,395):
  x=sum([(a*b) for a,b in zip(signal[i],noise[i])])
  y=np.mean((noise[i]))
  result=x/(581*y)
  median.append(result)
  
  
  
o1_wave = 1031.93
o2_wave = 1037.62
dw1 = (1.665*50*3*o1_wave)/(3*(10**5))
dw2 = (1.665*50*3*o2_wave)/(3*(10**5))


#plotting the spectrum

fig = plt.figure()
fig.set_size_inches(20, 5)
plt.title('pixel wise taken case')
plt.axvline(x=(1031.93) ,color='blue', linestyle='--' , label = 'OVI line(1031.93)' , ymin=0, ymax=0.99)
plt.axvline(x=(1037.62) , color='blue', linestyle='--' , label ='OVI line(1037.62' , ymin=0, ymax=0.99 )
plt.axhline(y=1, color='green', linestyle='-')
plt.axvspan(1031.93-(dw1/2),1031.93+(dw1/2), facecolor='green', alpha=0.5,label='3fwhm range of OVI (b=50km/s)')
plt.axvspan(1037.62-(dw2/2),1037.62+(dw2/2), facecolor='red', alpha=0.5,label='3fwhm range of OVI (b=50km/s)')
plt.text(1033,1.01,"WEIGHTED AVERAGED SPECTRA",size='x-large',color ='black')
plt.legend()
plt.plot(w_int,(pixel_wise),color='black')

fig = plt.figure()
fig.set_size_inches(20, 5)
plt.title('median taken case')
plt.axvline(x=(1031.93) ,color='blue', linestyle='--' , label = 'OVI line(1031.93)' , ymin=0, ymax=0.99)
plt.axvline(x=(1037.62) , color='blue', linestyle='--' , label ='OVI line(1037.62' , ymin=0, ymax=0.99 )
plt.axhline(y=1, color='green', linestyle='-')
plt.axvspan(1031.93-(dw1/2),1031.93+(dw1/2), facecolor='green', alpha=0.5,label='3fwhm range of OVI (b=50km/s)')
plt.axvspan(1037.62-(dw2/2),1037.62+(dw2/2), facecolor='red', alpha=0.5,label='3fwhm range of OVI (b=50km/s)')
plt.text(1033,1.01,"WEIGHTED AVERAGED SPECTRA",size='x-large',color ='black')
plt.legend()
plt.plot(w_int,(median),color='black')
