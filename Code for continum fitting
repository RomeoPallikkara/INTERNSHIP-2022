# mount drive
from google.colab import drive
drive.mount('/content/gdrive')

#importing all important libraries for the code

from astropy.io import fits
from astropy.table import Table
import matplotlib.pyplot as plt
import numpy as np
from scipy.interpolate import interp1d
import os
from statistics import *
from scipy.stats import norm
import seaborn as sns




#setting the path to the folder containg the fits files of the systems
path ="/content/gdrive/MyDrive/PURE OVI SYSTEMS"   

#using the os.walk  command in python to get only the fits files inside the directory and subdirectory

fitsfiles = []
for root, dirs, files in os.walk(path):
	for file in files:
		fitsfiles.append(os.path.join(root,file))
#now the list contains the path to each fits files

#opening the fits file by using hdul command

hdul = fits.open (fitsfiles[300])
cont= hdul[1].data['CONT']
wave =hdul[1].data['WAVE']
flux= hdul[1].data['FLUX']
err=hdul[1].data['ERR']
errc=hdul[1].data['ERRC']
econt=hdul[1].data['ECONT']
expt=hdul[1].data['EXPT']


#setting up the sigma_value(can find from the KDE plot , upto which value we need to remove the pixels) 
sigma_value=2

#The value of fwhm(b=50km/s) upto which in the region of OVI chunk we need to remove the pixels
fwhm_value=3


#Here we are using the numpy.polyfit tool to fit a 1 degree continum fit to the spectra
#m abd b are the values that are required in the 1D equation (y=m*x+b)

m, b = np.polyfit(wave, flux,1 )
line=[]
for i in wave:
  l =m*i + b
  line.append(l)
#the list line now have the 1 degree continum fit values for the spectra



#plotting a gaussian curve to the flux/cont values
mean,std=norm.fit(flux/cont)
xmin =min(flux/cont)
xmax=max(flux/cont)
x = np.linspace(xmin, xmax, len(flux))
y = norm.pdf(x, mean, std)


#calculating the sigma lengths 
sigma =sigma_value*std
sigma_length1= mean+sigma
sigma_length2 =mean-sigma


'''
#plotting the flux/cont KDE plot and fitting a gaussian curve to it

sns.displot(x=flux/cont,color="black",kind="kde",label='Danforth continum line',legend=True).set(title='Danforth continum fit  ')
plt.axvline(x=1, color='red', linestyle='-',label='line at 1')
plt.axvline(x=sigma_length1, color='green', linestyle='-',label='line at 3sigma')
plt.axvline(x=sigma_length2, color='blue', linestyle='-',label='line at 3sigma')
plt.plot(x, y,label='Gaussian')
plt.legend()
plt.show()

'''

# from here selecting the OVI range 3fwhm(b=50km/s) 

o1_wave = 1031.912
o2_wave = 1037.613
dw1 = (1.665*50*fwhm_value*o1_wave)/(3*(10**5))
dw2 = (1.665*50*fwhm_value*o2_wave)/(3*(10**5))

#calculating the wavelength range of 3fwhm
a=(o1_wave-(dw1/2))
b=(o1_wave+(dw1/2))
c=(o2_wave-(dw2/2))
d=(o2_wave+(dw2/2))

#selecting the wavelength that belong to the 3fwhm range of OVI chunks 1 and 2
ovi_chunk1=[]
for i in wave:
  if a<i<b:
    ovi_chunk1.append(i)
    

ovi_chunk2=[]
for i in wave:
  if c<i<d:
    ovi_chunk2.append(i)

wave=list(wave)

# choosing the index of these wavelengths to find the corresponding flux
oxy1_wave_index=[]
oxy1_wave_insert=[]
for i in ovi_chunk1:
  k=(wave.index(i))
  j=i
  oxy1_wave_index.append((k))
  oxy1_wave_insert.append((j))


oxy2_wave_index=[]
oxy2_wave_insert=[]
for i in ovi_chunk2:
  k=(wave.index(i))
  j=i
  oxy2_wave_index.append((k))
  oxy2_wave_insert.append((j))


# making the flux and wave pairs for the data in fits
pair =[list(pair) for pair in zip(wave, flux)] 


#The pairs(of wavelength and flux) within 3fwhm
ovi_chunk1_list=[]
for i in pair:
  for j in ovi_chunk1:
    if j in i:
      ovi_chunk1_list.append(i)

ovi_chunk2_list=[]
for i in pair:
  for j in ovi_chunk2:
    if j in i:
      ovi_chunk2_list.append(i)

# seperatnig out wave and flux from the pair made
w1, f1  = map(list, zip(*ovi_chunk1_list))
w2, f2  = map(list, zip(*ovi_chunk2_list))





#creating a list list_of_flux_for_deletion and now have to add these 2 ranges of flux named as f1 and f2 to the list_of_flux_for_deletion
list_of_flux_for_deletion=f1+f2


# Removing the flux pixels that are below a certain value of sigma we chose earlier

mean_flux,std_flux=norm.fit(flux)

sigma_flux =sigma_value*std_flux
sigma_length_max= mean_flux+sigma_flux
sigma_length_min =mean_flux-sigma_flux


for i in flux:
  if i < sigma_length_min:
    list_of_flux_for_deletion.append(i)

sample_flux=list(flux) # creating list of flux since it is a ndarray

#have to find the index of these fluxes which are below a certain limit in the sample_flux list
list_indexes=[]
elements_to_insert=[]
for i in list_of_flux_for_deletion:
  k=(sample_flux.index(i))
  j=i
  list_indexes.append((k))
  elements_to_insert.append((j))


# removing the flux which we identified to be removed and created a new list new_flux_list.
final_flux=list(flux)
for i in list_indexes:
  new_flux_list=[v for i, v in enumerate(final_flux) if i not in list_indexes]  



#have to remove the corresponding wavelengths and created a new list new_wave_list
final_wave=list(wave)
for i in list_indexes:
	new_wave_list=[v for i, v in enumerate(final_wave) if i not in list_indexes]
	

#fitting a new 1D continum with the pixels removed new_wave_list and new_flux_list to get a best continum and named it as obtained_continum
d, c = np.polyfit(new_wave_list, new_flux_list,1 )
obtained_continum=[]
for i in wave:
  l =d*i + c
  obtained_continum.append(l)



#for plotting a scatter plot to the removed pixel we need the list of wavelength and flux of the removed pixels
scatter_wave=[wave[i] for i in list_indexes]
# the list of removed flux is list_of_flux_for_deletion.


#Finally plotting these newly obtained identified continum and danfoth continum to compare along wih scatter plot of the removed pixels

fig = plt.figure()
fig.set_size_inches(20, 5)
plt.plot(wave,flux,color='black')
plt.axvline(x=(1031.93) ,color='green', linestyle='--' , label = 'OVI line(1031.93)' , ymin=0, ymax=0.99)
plt.axvline(x=(1037.62) , color='red', linestyle='--' , label ='OVI line(1037.62' , ymin=0, ymax=0.99 )
plt.plot(wave,cont,color='red',label='Danfoth continum ')
plt.plot(wave,obtained_continum,color='blue',label='Obtained continum')
plt.scatter(scatter_wave,list_of_flux_for_deletion,color='blue',label='pixels removed')
plt.axvspan(1031.93-(dw1/2),1031.93+(dw1/2), facecolor='green', alpha=0.5,label='3fwhm range of OVI (b=50km/s)')
plt.axvspan(1037.62-(dw2/2),1037.62+(dw2/2), facecolor='red', alpha=0.5,label='3fwhm range of OVI (b=50km/s)')
plt.title("Continum fitted plot")
plt.legend(bbox_to_anchor=(1.04,1), borderaxespad=0)
plt.savefig('/content/continum fitted plot.png',bbox_inches='tight')



'''

# saving new continum and other details in fits format

c1 = fits.Column(name='WAVE', array=wave,format='E' )
c2 = fits.Column(name='FLUX', array= (flux) ,format='E')
c3 = fits.Column(name='CONT', array= (obtained_continum) ,format='E')
c4 = fits.Column(name='ERR', array= (err) ,format='E')
c5 = fits.Column(name='ERRC', array= (errc) ,format='E')
c6 = fits.Column(name='ECONT', array= (econt) ,format='E')
c7 = fits.Column(name='EXPT', array= (expt) ,format='E')

table = fits.BinTableHDU.from_columns([c1, c2,c3,c4,c5,c6,c7 ])

table.writeto('/content/new fits'+str(i) ,overwrite = True)

'''
